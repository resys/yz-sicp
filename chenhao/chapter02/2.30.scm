(define x (list 1 (list 2 (list 3 4) 5) (list 6 7)))
(define (square-tree tree)
    (cond ((null? tree) nil)
          ((not (pair? tree)) (expt tree 2))
          (else (cons (square-tree (car tree)) (square-tree (cdr tree))))))
(define (square-tree tree)
  (map (lambda (tree) 
        (if (pair? tree)
            (square-tree tree)
            (expt tree 2))) tree))
(square-tree x)

