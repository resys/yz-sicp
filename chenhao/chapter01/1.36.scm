(define (fixed-point f first)
	(define tolorance 0.00001)
	(define (close_enough? a b)
		(< (abs (- a b)) tolorance)
	)
	(define (try test)
		(display test)
		(newline)
		(let ((y (f test)))
		(if (close_enough? test y)
			(/ (+ test y) 2.0)
			(try (/ (+ test y) 2.0))
		))
	)
	(try first)
)

(define (fixed-point_origin f first)
	(define tolorance 0.00001)
	(define (close_enough? a b)
		(< (abs (- a b)) tolorance)
	)
	(define (try test)
		(display test)
		(newline)
		(let ((y (f test)))
		(if (close_enough? test y)
			y
			(try y)
		))
	)
	(try first)
)


(fixed-point (lambda (x) (/ (log 1000) (log x))) 2.0)

(newline)

(fixed-point_origin  (lambda (x) (/ (log 1000) (log x))) 2.0)